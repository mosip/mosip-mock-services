
name: Maven Package upon a push 

on:
  push:
    branches:
      - master
      - 1.*
  
jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Setup branch and GPG public key 
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo ${{ env.BRANCH_NAME }}
        echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
        echo ${{ env.GPG_TTY }}
        sudo apt-get --yes install gnupg2
        gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg 
        gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg 
     
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
    
    - name: Install xmllint
      run: |
        sudo apt-get update
        sudo apt-get install libxml2-utils
        
    - name: Setup the settings file for ossrh server
      run: echo "<settings> <servers>  <server>  <id>ossrh</id>    <username>${{secrets.RELEASE_USER}}</username> <password>${{secrets.RELEASE_TOKEN}}</password> </server> </servers> <profiles> <profile>     <id>ossrh</id> <activation> <activeByDefault>true</activeByDefault> </activation>  <properties> <gpg.executable>gpg2</gpg.executable> <gpg.passphrase>${{secrets.gpg_secret}}</gpg.passphrase> </properties> </profile> <profile> <id>allow-snapshots</id>       <activation><activeByDefault>true</activeByDefault></activation> <repositories> <repository>        <id>snapshots-repo</id> <url>https://oss.sonatype.org/content/repositories/snapshots</url> <releases><enabled>false</enabled></releases> <snapshots><enabled>true</enabled></snapshots> </repository>  <repository>         <id>releases-repo</id>  <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>         <releases><enabled>true</enabled></releases>         <snapshots><enabled>false</enabled></snapshots> </repository> </repositories>  </profile> </profiles> </settings>" > $GITHUB_WORKSPACE/settings.xml

    - name: Build SDK with Maven
      run: |
        cd mock-sdk
        mvn -B package -s $GITHUB_WORKSPACE/settings.xml --file pom.xml
        
    - name: Build SBI with Maven
      run: |
        cd MockMDS
        mvn -B package -s $GITHUB_WORKSPACE/settings.xml --file pom.xml

    - name: Build abis with Maven
      run: |
        cd mock-abis
        mvn -B package -s $GITHUB_WORKSPACE/settings.xml --file pom.xml
    
    - name: Build image
      run: |
          cd mock-abis
          ls -ltr ./target
          docker build . --file Dockerfile --tag mock-abis
          
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin

    - name: Push image
      run: |
          IMAGE_ID=${{ secrets.dev_namespace_docker_hub }}/mock-abis
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag mock-abis $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

    - name: Build MockMV with Maven
      run: |
        cd mock-mv
        mvn -B package -s $GITHUB_WORKSPACE/settings.xml --file pom.xml
    
    - name: Build image
      run: |
          cd mock-mv
          ls -ltr ./target
          docker build . --file Dockerfile --tag mock-mv
          
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
    - name: Push image
      run: |
          IMAGE_ID=${{ secrets.dev_namespace_docker_hub }}/mock-mv
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag mock-mv $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
    - name: Publish the maven package
      run: |
        cd mock-sdk
        mvn deploy -DskipTests -DaltDeploymentRepository=ossrh::default::${{ secrets.OSSRH_SNAPSHOT_URL }} -s $GITHUB_WORKSPACE/settings.xml -f pom.xml
      env:
        GPG_TTY: $(tty)
